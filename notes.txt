//createElement("Name of the Tag","Attributes ","Chidren=>Normal React  Element or Array of React Elements")
//React Element is an object,when it is rendered onto the DOM it becomes an HTML Element.
//JSX code is transpiled before it reaches JS Engine=>Transpiling is done(Parcel sends this code to Babel to transpile)
//JSX=>Babel transpiles it to React. createElement=>ReactElement-JS Object=>HTMLElemnt(render)
//Components in React=>
//Class based Component-OLD
//Functional Component-NEW = Normal Javascript function
//Functional Component==>returns Functional Element(JSX Element)
//Component Composition=>One component inside another
//JSX Automatically sanitizes the code
//We can write any Javascript code inside {} in JSX so we can write a React compnent as
//<Title/> or <Title></Title> or {Title()} 


#React Hooks
-Normal JS Functions()
-Two Important React Hooks
--UseState-Super Powerful React Variables
--UseEffect-
--Every time state variable changes ,React rerenders the component.
--It keeps the UI Layer and Data Layer in sync`

React Fiber->Makes it fast(Differential Algorithm)(https://github.com/acdlite/react-fiber-architecture)
It does effecient DOM Manipulation
It finds the difference between Virtual DOMs and then manipulates the Main DOM(HTML)


Hooks:
-UseState=Used to create local state variables inside your functional component(Never create useSate hook outside Function component)
--Good practice to create it at the beginning of a function
--Never use useState inside a conditional block(Will create inconsistency)
--Never create state variables inside a for loop or inside inner functions
-useEffect(()=>{},[])(Callback Function ,Dependency Array)
--if no dependency array==>useEffect is called after every render
--if dependency array is empty([])==>then useEffect is called after initial render(just once)
--if we mentiona state variable in the dependency array==>useEffect is called avery time the state variable changes
--Never update state variables directly
Routing
--Client Side Routing--Using react-routing-dom we use client side routing,where a netwrok call is not made to load a new component.(Ep.07 1:05:00 )
--Server Side Routing--MAke a network call and server sends new page

Dynamic Routing

Use {link} from reat-router-dom instead of <href a="">(anchor tag),this does not refresh the page and only renders that part of the page.


Class Based Components:-
Lifecycle
--  =>Parent Constructor
    =>Parent Render
    =>Child Constructor
    =>Child Render
    =>Child componentDidMount
    =>Parent componentDidMount


If there are two Children (The render phase of the children are batched together and then the componentDidMount phase3 starts because the render phase usually completes fast(as it is only Javascript work) then the commit phase starts.Check React lifecycle methods diagram starts)Ep.08- 1:30:00
--  =>Parent Constructor
    =>Parent Render
    =>Child1 Constructor
    =>CHild1 Render
    =>Child2 Constructor
    =>CHild2 Render
    =>Child1 componentDidMount
    =>Child2 componentDidMount
    =>Parent componentDidMount


componentDidMOunt(API calls are made here.This is similar(Not the same) to useEffect hook in Functional Components)

Optimizing Code:-
-Single Responsibility principle-Custom Hooks
-Chunking,CodeSplitting,Lazy Loading,Dynamic Bundling,Dynamic Importing--We split our code into smaller chunks
--import React ,{lazy,Suspense} from "react"
--const Grocery=lazy(()=>import("./components/Grocery"))
--{
                path:"/Grocery",
                element:<Suspense fallback={<Shimmer/>}><Grocery/></Suspense>               
            }

--This creates two .js files when bundling and Grocery is not loaded initially


Adding style to our applications:-
-SASS
-SCSS
-Styled Components
-Material UI,Chakra UI,Antdesign
-Tailwind CSS-Only required CSS is shipped

Higher Order Component
-FUnction that Takes a component enhances it and returns a new component
-See restaurantCard for Higher Order Component and see how props has been used


--Accordions


UI Layer-Data Layer
Controlled Components and Uncontrolled Components:-
-Parent Component has some or all control over the child component(Check Restaurant Category and Restaurant Menu ,showItems is passed and controls the way RestaurantMenu is shown )
-Lifting the state up in React(Control moved to Parent component)

Props Drilling
--Data has to be passed from parent down to child one after the other which is bad.This can be evaded using React CONTEXT.

React CONTEXT
--We can keep context Wherever we want
--We can wrap the application only where required
--Tying UserCOntext with State Variable
--Check EP:11 2:40:00
--<UserContext.Provider value={{loggedInUser:userName,setUserName}}></UserContext.Provider>

Redux Versus React Context-(Redux is an external package whereas )


#Redux Toolkit
    -Install @reduxjs/toolkit and react-redux
    -Build our setListofRestaurants
    -Connect our store to the app
    -create slice(cartSlice)
    -Dispatch Action
    -Selector


Testing
--Install React Testing LIbrary
-Installed Jest
-Installed Babel
-configured Babel-(Parcel already uses Babel,so should make changes so that configuration issue doesn't happen)
--Configure Parcel Config file(.parcelrc) to disable default babel transpilation(Cause parcel transpilation is better)(https://parceljs.org/languages/javascript/#babel)=>Read the Babel section and then Usage with other tools
--Jest Configuration(npx jext --init )Choose jsdom,babel